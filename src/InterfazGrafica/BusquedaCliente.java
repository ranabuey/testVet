/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import AccesoDatos.ClienteData;
import AccesoDatos.MascotaData;
import AccesoDatos.VisitaData;
import Entidades.Cliente;
import Entidades.Mascota;
import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sun.security.x509.AlgorithmId;

/**
 *
 * @author usuario
 */
public class BusquedaCliente extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel();
    private DefaultTableModel modelo2 = new DefaultTableModel();
    ClienteData cd = new ClienteData();

    public BusquedaCliente() {
        initComponents();
        armarCabecera();
        armarCabeceraMAscota();
        jbReActivar.setVisible(false);
        jbBorrar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jcbBusquedas = new javax.swing.JComboBox<>();
        jtfBusquedas = new javax.swing.JTextField();
        jbBuscador = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtClientes = new javax.swing.JTable();
        jbReActivar = new javax.swing.JButton();
        jbSelCliente = new javax.swing.JButton();
        jbEditarCliente1 = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtMascotas = new javax.swing.JTable();
        jbEditarMascota = new javax.swing.JButton();
        jbHacerVisita = new javax.swing.JButton();
        jbBusqVisitas = new javax.swing.JButton();

        setClosable(true);

        jcbBusquedas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DNI", "APELLIDO", "TELEFONO", "ELIMINADOS" }));
        jcbBusquedas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbBusquedasActionPerformed(evt);
            }
        });
        jcbBusquedas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcbBusquedasKeyPressed(evt);
            }
        });

        jtfBusquedas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfBusquedasActionPerformed(evt);
            }
        });

        jbBuscador.setText("Buscar");
        jbBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscadorActionPerformed(evt);
            }
        });

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("BUSQUEDA CLIENTE");

        jtClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtClientes);

        jbReActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/nuevo cliente.png"))); // NOI18N
        jbReActivar.setText("ReActivar");
        jbReActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReActivarActionPerformed(evt);
            }
        });

        jbSelCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/usar.png"))); // NOI18N
        jbSelCliente.setText("Seleccionar");
        jbSelCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSelClienteActionPerformed(evt);
            }
        });

        jbEditarCliente1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        jbEditarCliente1.setText("Editar");
        jbEditarCliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarCliente1ActionPerformed(evt);
            }
        });

        jbBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/borrarCarpeta.png"))); // NOI18N
        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jcbBusquedas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jtfBusquedas, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(jbBuscador))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbReActivar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbBorrar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbEditarCliente1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbSelCliente)))))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbBusquedas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfBusquedas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscador))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbReActivar)
                    .addComponent(jbBorrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEditarCliente1)
                    .addComponent(jbSelCliente))
                .addGap(25, 25, 25))
        );

        jLabel1.setText("SUS MASCOTAS");

        jtMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtMascotas);

        jbEditarMascota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        jbEditarMascota.setText("Editar");
        jbEditarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarMascotaActionPerformed(evt);
            }
        });

        jbHacerVisita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/usar.png"))); // NOI18N
        jbHacerVisita.setText("Nueva Visita");
        jbHacerVisita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbHacerVisitaActionPerformed(evt);
            }
        });

        jbBusqVisitas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Botones/buscarVisitas.png"))); // NOI18N
        jbBusqVisitas.setText("Visitas");
        jbBusqVisitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBusqVisitasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jbEditarMascota)
                .addGap(33, 33, 33)
                .addComponent(jbBusqVisitas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbHacerVisita)
                .addGap(28, 28, 28))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(180, 180, 180))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEditarMascota)
                    .addComponent(jbHacerVisita)
                    .addComponent(jbBusqVisitas))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbHacerVisitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbHacerVisitaActionPerformed
        MascotaData md = new MascotaData();
        int filaSel = jtMascotas.getSelectedRow();

        MenuPrincipal.jtfMemoMascotaId.setText("" + modelo2.getValueAt(filaSel, 0));
        MenuPrincipal.jtfMemoAlias.setText("" + modelo2.getValueAt(filaSel, 1));
        MenuPrincipal.jtfMemoEspecie.setText("" + modelo2.getValueAt(filaSel, 2));
        MenuPrincipal.jtfMemoRaza.setText("" + modelo2.getValueAt(filaSel, 3));

        LocalDate fechaNac = (LocalDate) modelo2.getValueAt(filaSel, 5);
        int edad = md.calcularEdad(fechaNac);
        MenuPrincipal.jtfMemoEdad.setText("" + edad);
        double pesoProm = md.obtenerPesoPromedio((Integer) modelo2.getValueAt(filaSel, 0));
        MenuPrincipal.jtfMemoPesoProm.setText("" + pesoProm);

        CargarVisita cv = new CargarVisita();
        MenuPrincipal.jDesktopPane1.add(cv);

        cv.toFront();
        cv.setVisible(true);


    }//GEN-LAST:event_jbHacerVisitaActionPerformed

    private void jbBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscadorActionPerformed
        limpiarTablaClientes();
        limpiarTablaMacotas();
        try {

            if (jcbBusquedas.getSelectedIndex() == 0) {
                jbReActivar.setVisible(false);
                jbBorrar.setVisible(true);
                Cliente cliente = cd.buscarClienteDni(Integer.parseInt(jtfBusquedas.getText()));

                modelo.addRow(new Object[]{
                    cliente.getIdCliente(),
                    cliente.getApellido(),
                    cliente.getNombre(),
                    cliente.getTelefono(),
                    cliente.getDni(),});

            } else {
                if (jcbBusquedas.getSelectedIndex() == 2) {
                    jbReActivar.setVisible(false);
                    jbBorrar.setVisible(true);
                    Cliente cliente = cd.buscarClienteTel(Integer.parseInt(jtfBusquedas.getText()));

                    modelo.addRow(new Object[]{
                        cliente.getIdCliente(),
                        cliente.getApellido(),
                        cliente.getNombre(),
                        cliente.getTelefono(),
                        cliente.getDni(),});

                } else if (jcbBusquedas.getSelectedIndex() == 1) {
                    jbReActivar.setVisible(false);
                    jbBorrar.setVisible(true);
                    String busq = jtfBusquedas.getText();
                    List<Cliente> listaCli = cd.listarClientes();
                    for (Cliente cliente : listaCli) {
                        if (cliente.getApellido().startsWith(busq)) {
                            modelo.addRow(new Object[]{
                                cliente.getIdCliente(),
                                cliente.getApellido(),
                                cliente.getNombre(),
                                cliente.getTelefono(),
                                cliente.getDni(),});
                        }
                    }
                    if (jtClientes.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(this, "No se encontro clientes con ese criterio.");
                    }
                } else if (jcbBusquedas.getSelectedIndex() == 3) {
                    jbBorrar.setVisible(false);
                    List<Cliente> listaCli = cd.listarClientesNoActivos();
                    for (Cliente cliente : listaCli) {

                        modelo.addRow(new Object[]{
                            cliente.getIdCliente(),
                            cliente.getApellido(),
                            cliente.getNombre(),
                            cliente.getTelefono(),
                            cliente.getDni(),});
                    }
                    jbReActivar.setVisible(true);
                }

            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "debe poner un numero");
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_jbBuscadorActionPerformed

    private void jtfBusquedasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfBusquedasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfBusquedasActionPerformed

    private void jcbBusquedasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbBusquedasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbBusquedasActionPerformed

    private void jbReActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReActivarActionPerformed
        try {

            ClienteData cd = new ClienteData();
            int filaSel = jtClientes.getSelectedRow();
            int input = JOptionPane.showConfirmDialog(null, "ESTA SEGURO DE QUERER Re-Activar AL SISTEMA AL CLIENTE " + modelo.getValueAt(filaSel, 1) + ", DNI: " + modelo.getValueAt(filaSel, 4), "Seleccione una opcion...",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            if (input == 0) {
                Cliente c = new Cliente();
                c = cd.buscarClienteDni((Integer) (modelo.getValueAt(filaSel, 4)));
                cd.reActivarCliente(c.getIdCliente());
                limpiarTablaClientes();
                jbReActivar.setVisible(false);
            } else {

            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
        }

    }//GEN-LAST:event_jbReActivarActionPerformed

    private void jbSelClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSelClienteActionPerformed
        try {
            int filaSel = jtClientes.getSelectedRow();
            int dni = (Integer) modelo.getValueAt(filaSel, 4);

            MenuPrincipal.jtfMemoClienteID.setText("" + modelo.getValueAt(filaSel, 0));
            MenuPrincipal.jtfMemoClienteApellido.setText("" + modelo.getValueAt(filaSel, 1));
            MenuPrincipal.jtfMemoClienteNombre.setText("" + modelo.getValueAt(filaSel, 2));
            MenuPrincipal.jtfMemoTelefono.setText("" + modelo.getValueAt(filaSel, 3));
            MenuPrincipal.jtfMemoClienteDNI.setText("" + modelo.getValueAt(filaSel, 4));

            MascotaData md = new MascotaData();
            List<Mascota> mascList = md.listarMascotasXIDCliente((Integer) jtClientes.getValueAt(filaSel, 0));
            for (Mascota mascota : mascList) {
                modelo2.addRow(new Object[]{
                    mascota.getIdMascota(),
                    mascota.getAlias(),
                    mascota.getEspecie(),
                    mascota.getRaza(),
                    mascota.getSexo(),
                    mascota.getFechaNac()});
            }

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
        }

    }//GEN-LAST:event_jbSelClienteActionPerformed

    private void jbEditarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarMascotaActionPerformed
        try {
            MascotaData md = new MascotaData();
            int filaSel = jtMascotas.getSelectedRow();

            MenuPrincipal.jtfMemoMascotaId.setText("" + modelo2.getValueAt(filaSel, 0));
            MenuPrincipal.jtfMemoAlias.setText("" + modelo2.getValueAt(filaSel, 1));
            MenuPrincipal.jtfMemoEspecie.setText("" + modelo2.getValueAt(filaSel, 2));
            MenuPrincipal.jtfMemoRaza.setText("" + modelo2.getValueAt(filaSel, 3));

            LocalDate fechaNac = (LocalDate) modelo2.getValueAt(filaSel, 5);
            int edad = md.calcularEdad(fechaNac);
            MenuPrincipal.jtfMemoEdad.setText("" + edad);
            double pesoProm = md.obtenerPesoPromedio((Integer) modelo2.getValueAt(filaSel, 0));
            MenuPrincipal.jtfMemoPesoProm.setText("" + pesoProm);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
        }
        GuardarNuevos gn = new GuardarNuevos();
        MenuPrincipal.jDesktopPane1.add(gn);
        gn.setVisible(true);
        gn.setVisible(true);

    }//GEN-LAST:event_jbEditarMascotaActionPerformed

    private void jbEditarCliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarCliente1ActionPerformed
        try {

            ClienteData cd = new ClienteData();
            int filaSel = jtClientes.getSelectedRow();

            MenuPrincipal.jtfMemoClienteID.setText("" + modelo.getValueAt(filaSel, 0));
            MenuPrincipal.jtfMemoClienteApellido.setText("" + modelo.getValueAt(filaSel, 1));
            MenuPrincipal.jtfMemoClienteNombre.setText("" + modelo.getValueAt(filaSel, 2));
            MenuPrincipal.jtfMemoTelefono.setText("" + modelo.getValueAt(filaSel, 3));
            MenuPrincipal.jtfMemoClienteDNI.setText("" + modelo.getValueAt(filaSel, 4));
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
        }

        GuardarNuevos gn = new GuardarNuevos();
        MenuPrincipal.jDesktopPane1.add(gn);
        gn.setVisible(true);
        gn.setVisible(true);

//         CargarVisita cv = new CargarVisita();
//        MenuPrincipal.jDesktopPane1.add(cv);
//        cv.toFront();
//        cv.setVisible(true);
    }//GEN-LAST:event_jbEditarCliente1ActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        try {

            ClienteData cd = new ClienteData();
            int filaSel = jtClientes.getSelectedRow();
            int input = JOptionPane.showConfirmDialog(null, "ESTA SEGURO DE QUERER ELIMINAR DEL SISTEMA AL CLIENTE " + modelo.getValueAt(filaSel, 1) + ", DNI: " + modelo.getValueAt(filaSel, 4), "Seleccione una opcion...",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            if (input == 0) {
                Cliente c = new Cliente();
                c = cd.buscarClienteDni((Integer) (modelo.getValueAt(filaSel, 4)));
                cd.eliminarCliente(c.getIdCliente());
                limpiarTablaClientes();
                jbBorrar.setVisible(false);
                MenuPrincipal.borrarCamposCliente();
                MenuPrincipal.borrarCamposMascota();
            } else {

            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jcbBusquedasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcbBusquedasKeyPressed

    }//GEN-LAST:event_jcbBusquedasKeyPressed

    private void jbBusqVisitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBusqVisitasActionPerformed
        try {
            MascotaData md = new MascotaData();
            int filaSel = jtMascotas.getSelectedRow();

            MenuPrincipal.jtfMemoMascotaId.setText("" + modelo2.getValueAt(filaSel, 0));
            MenuPrincipal.jtfMemoAlias.setText("" + modelo2.getValueAt(filaSel, 1));
            MenuPrincipal.jtfMemoEspecie.setText("" + modelo2.getValueAt(filaSel, 2));
            MenuPrincipal.jtfMemoRaza.setText("" + modelo2.getValueAt(filaSel, 3));

            LocalDate fechaNac = (LocalDate) modelo2.getValueAt(filaSel, 5);
            int edad = md.calcularEdad(fechaNac);
            MenuPrincipal.jtfMemoEdad.setText("" + edad);
            double pesoProm = md.obtenerPesoPromedio((Integer) modelo2.getValueAt(filaSel, 0));
            MenuPrincipal.jtfMemoPesoProm.setText("" + pesoProm);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Mascota");
        }
        BusquedaVisita bv = new BusquedaVisita();
        MenuPrincipal.jDesktopPane1.add(bv);
        bv.setVisible(true);
        bv.setVisible(true);

//        MascotaData md = new MascotaData();
//        ClienteData cd = new ClienteData();
//        VisitaData vd=new VisitaData();
//                
//        try {
//            int filaSel = jtClientes.getSelectedRow();
//            
//        } catch (ArrayIndexOutOfBoundsException e) {
//            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
//        }
    }//GEN-LAST:event_jbBusqVisitasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbBuscador;
    private javax.swing.JButton jbBusqVisitas;
    private javax.swing.JButton jbEditarCliente1;
    private javax.swing.JButton jbEditarMascota;
    private javax.swing.JButton jbHacerVisita;
    private javax.swing.JButton jbReActivar;
    private javax.swing.JButton jbSelCliente;
    private javax.swing.JComboBox<String> jcbBusquedas;
    private javax.swing.JTable jtClientes;
    private javax.swing.JTable jtMascotas;
    private javax.swing.JTextField jtfBusquedas;
    // End of variables declaration//GEN-END:variables
private void armarCabecera() {
        modelo.addColumn("ID");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        modelo.addColumn("Telefono");
        modelo.addColumn("DNI");
        jtClientes.setModel(modelo);
    }

    private void armarCabeceraMAscota() {
        modelo2.addColumn("ID");
        modelo2.addColumn("Alias");
        modelo2.addColumn("Especie");
        modelo2.addColumn("Raza");
        modelo2.addColumn("Sexo");
        modelo2.addColumn("Fecha Nac.");
        jtMascotas.setModel(modelo2);
    }

    private void limpiarTablaClientes() {
        int f = modelo.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    private void limpiarTablaMacotas() {
        int f = modelo2.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo2.removeRow(f);
        }
    }
}
